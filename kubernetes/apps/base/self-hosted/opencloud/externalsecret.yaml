---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name opencloud
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-backend
  target:
    name: *name
    template:
      data:

        # email server
        NOTIFICATIONS_SMTP_HOST: "smtp-relay.default.svc.cluster.local"
        NOTIFICATIONS_SMTP_PORT: "25"
        NOTIFICATIONS_SMTP_SENDER: "Files notifications <${SECRET_SMTP_FROM_FULL}>"
        NOTIFICATIONS_SMTP_INSECURE: "true"
        NOTIFICATIONS_SMTP_ENCRYPTION: "none"



        # Keycloak IDP specific configuration
        OC_OIDC_ISSUER: "{{ .openid_issuer }}"
        PROXY_AUTOPROVISION_ACCOUNTS: "true"
        PROXY_ROLE_ASSIGNMENT_DRIVER: "oidc"
        PROXY_USER_OIDC_CLAIM: "preferred_username"
        PROXY_USER_CS3_CLAIM: "username"
        PROXY_ROLE_ASSIGNMENT_OIDC_CLAIM: "groups"
        WEB_OIDC_CLIENT_ID: "{{ .client_id }}"
        WEB_OIDC_SCOPE: "openid profile email groups offline_access"
        GRAPH_ASSIGN_DEFAULT_USER_ROLE: "false"
        PROXY_OIDC_REWRITE_WELLKNOWN: "true"
        ##### THESE VARIABLES ARE IMPORTANT TO GET AUTHENTIK WORKING!!! ########
        PROXY_ACCESS_TOKEN_VERIFY_METHOD: "none"
        PROXY_AUTOPROVISION_CLAIM_USERNAME: "preferred_username"
        #WEB_OIDC_CLIENT_ID: OpenCloudDesktop
        OC_ADMIN_USER_ID: "" # passed actual empty string, this isn't a stand-in for something else I passed
        GRAPH_USERNAME_MATCH: "none"
        SETTINGS_SETUP_DEFAULT_ASSIGNMENTS: "false"
        WEB_OIDC_METADATA_URL: "{{ .openid_config }}"
        #OC_LDAP_URI: ldaps://ldap-server:1636
        #OC_LDAP_SERVER_WRITE_ENABLED: "true"
        #FRONTEND_READONLY_USER_ATTRIBUTES: "user.onPremisesSamAccountName,user.displayName,user.mail,user.passwordProfile,user.memberOf"
        #OC_LDAP_INSECURE: "true"
        #OC_LDAP_BIND_DN: "cn=admin,dc=opencloud,dc=eu"
        #OC_LDAP_BIND_PASSWORD: ${LDAP_ADMIN_PASSWORD:-admin}
        #OC_LDAP_USER_BASE_DN: "ou=users,dc=opencloud,dc=eu"
        #OC_LDAP_DISABLE_USER_MECHANISM: "none"
        #OC_LDAP_GROUP_BASE_DN: "ou=groups,dc=opencloud,dc=eu"
        ####### END AUTHENTIK-IMPORTANT VARIABLE BLOCK ##########

        #SETTINGS_SETUP_DEFAULT_ASSIGNMENTS: "false"
        #GRAPH_ASSIGN_DEFAULT_USER_ROLE: "false"
        #GRAPH_USERNAME_MATCH: "none"
        #PROXY_USER_CS3_CLAIM: "username"
        #PROXY_AUTOPROVISION_CLAIM_USERNAME: sub
        ##PROXY_USER_OIDC_CLAIM: "uuid"
        ##PROXY_USER_OIDC_CLAIM: "preferred_username"
        ##PROXY_USER_CS3_CLAIM: "userid"
        #PROXY_OIDC_ACCESS_TOKEN_VERIFY_METHOD: "none"
        ### ─── 1. Tell OpenCloud where Authentik lives ───────────────────────────────
        ## Issuer URL (must match Authentik’s discovery endpoint without “/.well-known/…”)
        #OC_OIDC_ISSUER: "{{ .openid_issuer }}"
        ##OC_OIDC_ISSUER: "{{ .OC_OIDC_ISSUER }}"
        ## Make sure OpenCloud rewrites “/.well-known/openid-configuration” to Authentik
        #PROXY_OIDC_REWRITE_WELLKNOWN: "true"
        ### ─── 2. Provide the Authentik Client ID / Secret ─────────────────────────
        ## These must exactly match the values from Authentik’s Provider details
        #OC_OIDC_CLIENT_ID: "{{ .client_id }}"
        #OC_OIDC_CLIENT_SECRET: "{{ .client_secret }}"
        ### ─── 3. Choose which claim from Authentik’s ID token will be used as username ──
        ## “sub” is guaranteed unique and stable across a user’s life in Authentik
        #PROXY_USER_OIDC_CLAIM: "sub"
        ##PROXY_USER_OIDC_CLAIM: "preferred_username"
        ### ─── 4. Automatically provision users on first login? ────────────────────
        ## If true, new Authentik users get auto‐created in OpenCloud on first login
        #PROXY_AUTOPROVISION_ACCOUNTS: "true"
        ### ─── 5. Tell OpenCloud to use OIDC for role assignment (instead of LDAP) ───
        #PROXY_ROLE_ASSIGNMENT_DRIVER: "oidc"
        #PROXY_ROLE_ASSIGNMENT_OIDC_CLAIM: "groups"
        ### ─── 6. (Optional) If you want RBAC mapped from Authentik “groups” → OpenCloud roles
        ## PROXY_AUTOPROVISION_CLAIM_USERNAME: "preferred_username"
        ## PROXY_AUTOPROVISION_CLAIM_EMAIL: "email"
        ##
        ## You can later configure in OpenCloud’s admin UI how to map incoming “groups”
        ## from Authentik’s ID token to specific roles (e.g. Administrator, Editor, Viewer).
        ### ─── 7. Other recommended proxy settings ─────────────────────────────────
        #PROXY_OIDC_HTTP_ONLY_COOKIES: "false"
        #PROXY_INSECURE_HTTPS_SKIP_VERIFY: "false"
        #PROXY_OIDC_REQUIRE_HTTPS: "true"
        #PROXY_OIDC_SCOPES: "openid profile email groups offline_access"
        ##- name: WEB_OIDC_SCOPE
        ##  value: "openid profile email groups"
        ### ─── 8. OpenCloud core settings ──────────────────────────────────────────
        ## (Only include the ones you actually need; others can stay at defaults.)
        #OC_ENABLE_BASIC_AUTH: "false"
        # Admin user password
        IDM_ADMIN_PASSWORD: "{{ .IDM_ADMIN_PASSWORD }}"                # initial local admin user (not used once OIDC is up)

        OC_CREATE_DEMO_USERS: "false"
        OC_LOG_LEVEL: "info"




  dataFrom:
    - extract:
        key: ${CLUSTER}/opencloud
    - extract:
        key: ${CLUSTER}/openid/files

