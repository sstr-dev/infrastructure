---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app lidarr
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:

    defaultPodOptions:
      #annotations:
      #  setDownloadGateway: "true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    controllers:
      lidarr:
        replicas: ${REPLICAS:=1}
        annotations:
          reloader.stakater.com/auto: "true"
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/lidarr
              tag: 2.14.1.4755
              pullPolicy: IfNotPresent
            env:
              TZ: ${CLUSTER_TIMEZONE}
              LIDARR__SERVER__PORT: &port 80
              LIDARR__INSTANCE_NAME: Lidarr
              LIDARR__APP__THEME: dark
              LIDARR__AUTH__METHOD: External
              LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
              LIDARR__LOG__DBENABLED: "False"
              LIDARR__LOG__LEVEL: info
              LIDARR__LOG__ANALYTICSENABLED: "False"
            envFrom:
              - secretRef:
                  name: *app
            #probes:
            #  liveness: &probes
            #    enabled: true
            #    custom: true
            #    spec:
            #      httpGet:
            #        path: /ping
            #        port: *port
            #      initialDelaySeconds: 0
            #      periodSeconds: 10
            #      timeoutSeconds: 1
            #      failureThreshold: 3
            #  readiness: *probes
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi

    #serviceMonitor:
    #  app:
    #    serviceName: *app
    #    endpoints:
    #      - port: http
    #        scheme: http
    #        path: /metrics
    #        interval: 1m
    #        scrapeTimeout: 10s

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        enabled: ${DEFAULTINGRESSEN:=true}
        className: ${INGRESSCLASS}
        #annotations:
        #  gethomepage.dev/enabled: "true"
        #  gethomepage.dev/description: Swiss army knife for IT
        #  gethomepage.dev/group: Home
        #  gethomepage.dev/icon: it-tools.svg
        #  gethomepage.dev/name: IT-Tools
        #  gethomepage.dev/pod-selector: >-
        #    app.kubernetes.io/name in (
        #      it-tools
        #    )
        hosts:
          - host: &host "{{ .Release.Name }}.${DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
      iot:
        enabled: ${IOTINGRESS:=false}
        className: iot-nginx
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Lidarr
          gethomepage.dev/icon: lidarr.png
          gethomepage.dev/description: Music Downloads
          gethomepage.dev/pod-selector: >-
            app.kubernetes.io/name in (
              lidarr
            )
          gethomepage.dev/widget.type: lidarr
          gethomepage.dev/widget.url: http://{{ .Release.Name }}.{{ .Release.Namespace }}:80
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_LIDARR_TOKEN}}` }}"
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_MAIN_DOMAIN_NAME}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          #- secretName: chart-example-tls
          - hosts:
            - *host

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        existingClaim: *app
      audio:
        enabled: true
        type: hostPath
        hostPath: ${SHARED_MEDIA_PATH}/audio
        globalMounts:
          - path: /audio
            readOnly: false
      downloads:
        enabled: true
        type: hostPath
        hostPath: ${SHARED_MEDIA_PATH}/download/audio
        globalMounts:
          - path: /downloads
            readOnly: false
