---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1beta2.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 76.3.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    alertmanager:
      #ingress:
      #  enabled: true
      #  ingressClassName: "${INGRESSCLASS}"
      #  hosts:
      #   - alertmanager.${SECRET_MAIN_DOMAIN_NAME}
      route:
        main:
          enabled: true
          hostnames:
            - alertmanager.${SECRET_MAIN_DOMAIN_NAME}
          parentRefs:
            - name: main
              namespace: network
              sectionName: https
          annotations:
            gethomepage.dev/enabled: 'true'
            gethomepage.dev/group: Observability
            gethomepage.dev/name: Alertmanager
            gethomepage.dev/icon: alertmanager.svg
            gethomepage.dev/pod-selector: app.kubernetes.io/name=alertmanager
      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m
        externalUrl: https://alertmanager.${SECRET_MAIN_DOMAIN_NAME}
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ${STORAGECLASS}
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
          multicluster:
            etcd:
              enabled: true
    kubeEtcd:
      service:
        selector:
          component: kube-apiserver # etcd runs on control plane nodes
    kubeControllerManager:
      enabled: false
      #service:
      #  selector:
      #    k8s-app: kube-controller-manager
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    prometheus-node-exporter:
      enabled: false
      fullnameOverride: node-exporter
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: "homelab.k8s.io/type"
          operator: "Equal"
          value: "vm"
          effect: "NoExecute"
      extraArgs:
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(tmpfs|autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
        - --collector.diskstats.device-exclude=^(ram|loop|fd|sr|(h|s|v|xv)d[a-z]+|nvme\d+n\d+p|nvme\d+c\d+n)\d+$
        - --no-collector.nvme
      prometheus:
        monitor:
          enabled: false
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 200
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
    prometheus:
      route:
        main:
          enabled: true
          hostnames: ["prometheus.${SECRET_MAIN_DOMAIN_NAME}"]
          parentRefs:
            - name: main
              namespace: network
              sectionName: https
          annotations:
            gethomepage.dev/enabled: 'true'
            gethomepage.dev/group: Observability
            gethomepage.dev/name: Prometheus
            gethomepage.dev/icon: prometheus.svg
            gethomepage.dev/pod-selector: operator.prometheus.io/name=kube-prometheus-stack
            gethomepage.dev/widget.type: prometheus
            gethomepage.dev/widget.url: 'http://kube-prometheus-stack-prometheus.observability.svc.cluster.local.:9090'
      #ingress:
      #  enabled: true
      #  ingressClassName: "${INGRESSCLASS}"
      #  hosts:
      #   - prometheus.${SECRET_MAIN_DOMAIN_NAME}
      prometheusSpec:
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - memory-snapshot-on-shutdown
        externalLabels:
          cluster: ${CLUSTER}
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 3000Mi
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        retention: 30d
        retentionSize: ${PVC_CAPACITY}GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ${STORAGECLASS}
              resources:
                requests:
                  storage: ${PVC_CAPACITY}Gi
    cleanPrometheusOperatorObjectNames: true
